{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "13db2929-b406-417e-b7ec-524f7c02ef20",
   "metadata": {},
   "outputs": [],
   "source": [
    "from osgeo import gdal, ogr\n",
    "import numpy as np\n",
    "import os\n",
    "\n",
    "def reproject_and_resample(input_path, output_resolution, output_srs, clip_shp, nodata_value, output_type=gdal.GDT_UInt16):\n",
    "    \"\"\"Reproject, resample, and clip a raster.\"\"\"\n",
    "    # Options de reprojection et de découpe\n",
    "    warp_options = gdal.WarpOptions(\n",
    "        format=\"MEM\",\n",
    "        xRes=output_resolution[0],\n",
    "        yRes=output_resolution[1],\n",
    "        dstSRS=output_srs,\n",
    "        cutlineDSName=clip_shp,\n",
    "        cropToCutline=True,\n",
    "        dstNodata=nodata_value,\n",
    "        outputType=output_type,\n",
    "        resampleAlg=gdal.GRA_Bilinear\n",
    "    )\n",
    "    reprojected_ds = gdal.Warp(\"\", input_path, options=warp_options)\n",
    "    return reprojected_ds\n",
    "\n",
    "def stack_bands(input_folders, emprise_shp, masque_foret, output_resolution, output_srs, output_path, dtype, nodata):\n",
    "    \"\"\"Stack all bands from multiple dates into one raster.\"\"\"\n",
    "    all_bands = []\n",
    "    for folder in input_folders:\n",
    "        for band_file in sorted(os.listdir(folder)):\n",
    "            band_path = os.path.join(folder, band_file)\n",
    "            if band_file.endswith(\".tif\"):\n",
    "                # Reprojection et découpe\n",
    "                reprojected_band = reproject_and_resample(\n",
    "                    input_path=band_path,\n",
    "                    output_resolution=output_resolution,\n",
    "                    output_srs=output_srs,\n",
    "                    clip_shp=emprise_shp,\n",
    "                    nodata_value=nodata,\n",
    "                    output_type=dtype,\n",
    "                )\n",
    "                # Masquer les zones non-forêt\n",
    "                mask_ds = gdal.Open(masque_foret)\n",
    "                mask = mask_ds.GetRasterBand(1).ReadAsArray()\n",
    "                band_data = reprojected_band.GetRasterBand(1).ReadAsArray()\n",
    "                band_data[mask == 0] = nodata\n",
    "                all_bands.append(band_data)\n",
    "\n",
    "    # Créer le raster de sortie\n",
    "    driver = gdal.GetDriverByName(\"GTiff\")\n",
    "    first_band = all_bands[0]\n",
    "    out_ds = driver.Create(output_path, first_band.shape[1], first_band.shape[0], len(all_bands), dtype)\n",
    "    out_ds.SetProjection(reprojected_band.GetProjection())\n",
    "    out_ds.SetGeoTransform(reprojected_band.GetGeoTransform())\n",
    "\n",
    "    # Ajouter les bandes au fichier\n",
    "    for i, band_data in enumerate(all_bands):\n",
    "        out_band = out_ds.GetRasterBand(i + 1)\n",
    "        out_band.WriteArray(band_data)\n",
    "        out_band.SetNoDataValue(nodata)\n",
    "\n",
    "    out_ds.FlushCache()\n",
    "    out_ds = None  # Fermer le fichier\n",
    "\n",
    "def compute_ndvi(input_folders, emprise_shp, masque_foret, output_resolution, output_srs, output_path, dtype, nodata):\n",
    "    \"\"\"Compute NDVI for multiple dates and stack them.\"\"\"\n",
    "    ndvi_stack = []\n",
    "    for folder in input_folders:\n",
    "        # Rechercher les bandes rouge et proche-infrarouge\n",
    "        band_red_path = os.path.join(folder, \"B4.tif\")  # Bande rouge\n",
    "        band_nir_path = os.path.join(folder, \"B8.tif\")  # Bande proche-infrarouge\n",
    "\n",
    "        # Reprojection et découpe\n",
    "        red_ds = reproject_and_resample(\n",
    "            input_path=band_red_path,\n",
    "            output_resolution=output_resolution,\n",
    "            output_srs=output_srs,\n",
    "            clip_shp=emprise_shp,\n",
    "            nodata_value=nodata,\n",
    "            output_type=gdal.GDT_Float32,\n",
    "        )\n",
    "        nir_ds = reproject_and_resample(\n",
    "            input_path=band_nir_path,\n",
    "            output_resolution=output_resolution,\n",
    "            output_srs=output_srs,\n",
    "            clip_shp=emprise_shp,\n",
    "            nodata_value=nodata,\n",
    "            output_type=gdal.GDT_Float32,\n",
    "        )\n",
    "\n",
    "        # Calculer le NDVI\n",
    "        red = red_ds.GetRasterBand(1).ReadAsArray().astype(np.float32)\n",
    "        nir = nir_ds.GetRasterBand(1).ReadAsArray().astype(np.float32)\n",
    "        ndvi = (nir - red) / (nir + red)\n",
    "        ndvi[np.isnan(ndvi)] = nodata\n",
    "        ndvi_stack.append(ndvi)\n",
    "\n",
    "    # Créer le raster NDVI\n",
    "    driver = gdal.GetDriverByName(\"GTiff\")\n",
    "    first_ndvi = ndvi_stack[0]\n",
    "    out_ds = driver.Create(output_path, first_ndvi.shape[1], first_ndvi.shape[0], len(ndvi_stack), dtype)\n",
    "    out_ds.SetProjection(red_ds.GetProjection())\n",
    "    out_ds.SetGeoTransform(red_ds.GetGeoTransform())\n",
    "\n",
    "    # Ajouter les bandes NDVI au fichier\n",
    "    for i, ndvi in enumerate(ndvi_stack):\n",
    "        out_band = out_ds.GetRasterBand(i + 1)\n",
    "        out_band.WriteArray(ndvi)\n",
    "        out_band.SetNoDataValue(nodata)\n",
    "\n",
    "    out_ds.FlushCache()\n",
    "    out_ds = None  # Fermer le fichier\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
